# SingBox VPN One-Click Cleaner (Windows / PowerShell 5+)
param(
    [switch]$All,               # Aggressive: also clear caches (Go/Dart) and dist
    [switch]$IncludeDist,       # Remove dist/ (packaged zips)
    [switch]$IncludeCaches,     # Remove local cache.db files
    [switch]$GoCache,           # Run: go clean -cache -testcache -modcache
    [switch]$NoFlutterClean,    # Skip flutter clean
    [switch]$NoKill,            # Do not attempt to stop running processes
    [switch]$DryRun,            # Print actions only, do not delete
    [switch]$Help               # Show help and exit
)

$ErrorActionPreference = 'SilentlyContinue'

function Show-Help {
    Write-Host 'SingBox VPN Cleaner' -ForegroundColor Green
    Write-Host 'Usage: .\clean_all.ps1 [-All] [-IncludeDist] [-IncludeCaches] [-GoCache] [-NoFlutterClean] [-NoKill] [-DryRun]' -ForegroundColor Yellow
    Write-Host ''
    Write-Host 'Options:' -ForegroundColor Yellow
    Write-Host '  -All              Aggressive clean: include dist/, caches and Go cache' -ForegroundColor White
    Write-Host '  -IncludeDist      Also delete dist/ packaging outputs' -ForegroundColor White
    Write-Host '  -IncludeCaches    Also delete local cache files (cache.db)' -ForegroundColor White
    Write-Host '  -GoCache          Run go clean for global caches (cache/testcache/modcache)' -ForegroundColor White
    Write-Host '  -NoFlutterClean   Skip flutter clean (faster but less thorough)' -ForegroundColor White
    Write-Host '  -NoKill           Do not stop running Gsou/gsou_daemon processes' -ForegroundColor White
    Write-Host '  -DryRun           Show what would be removed without deleting' -ForegroundColor White
}

if ($Help) { Show-Help; exit 0 }

# Expand presets
if ($All) {
    $IncludeDist = $true
    $IncludeCaches = $true
    $GoCache = $true
}

# Always operate from repo root
Set-Location -Path $PSScriptRoot

function Step($msg) { Write-Host "[CLEAN] $msg" -ForegroundColor Cyan }
function Ok($msg)   { Write-Host "[OK] $msg" -ForegroundColor Green }
function Warn($msg) { Write-Host "[WARN] $msg" -ForegroundColor Yellow }

function Remove-Path {
    param(
        [Parameter(Mandatory=$true)][string]$Path,
        [switch]$Recurse
    )
    if (-not (Test-Path -LiteralPath $Path)) { return }
    if ($DryRun) {
        Write-Host "Would remove: $Path" -ForegroundColor DarkGray
        return
    }
    try {
        if ($Recurse) { Remove-Item -LiteralPath $Path -Recurse -Force -ErrorAction SilentlyContinue }
        else { Remove-Item -LiteralPath $Path -Force -ErrorAction SilentlyContinue }
    } catch {}
}

function Remove-ByPattern {
    param(
        [Parameter(Mandatory=$true)][string[]]$Patterns
    )
    foreach ($pat in $Patterns) {
        $items = Get-ChildItem -Path $pat -Force -ErrorAction SilentlyContinue
        foreach ($it in $items) {
            $isDir = Test-Path -LiteralPath $it.FullName -PathType Container
            Remove-Path -Path $it.FullName -Recurse:$isDir
        }
    }
}

function Stop-RunningProcesses {
    if ($NoKill) { Warn 'Skip stopping processes (requested)'; return }
    Step 'Stopping running processes that may lock build outputs'
    $targets = @('Gsou','gsou_daemon')
    foreach ($name in $targets) {
        $procs = Get-Process -Name $name -ErrorAction SilentlyContinue
        foreach ($p in $procs) {
            if ($DryRun) { Write-Host "Would stop process: $($p.ProcessName) (PID=$($p.Id))" -ForegroundColor DarkGray }
            else {
                try { Stop-Process -Id $p.Id -Force -ErrorAction SilentlyContinue; Ok "Stopped $($p.ProcessName) (PID=$($p.Id))" } catch {}
            }
        }
    }
}

Write-Host '========================================'
Write-Host 'SingBox VPN - Clean All Artifacts'
Write-Host '========================================'

# 1) Stop processes
Stop-RunningProcesses

# 2) Flutter clean
if (-not $NoFlutterClean) {
    Step 'Running flutter clean'
    if ($DryRun) { Write-Host 'Would run: flutter clean' -ForegroundColor DarkGray }
    else {
        try { flutter clean | Out-Null } catch { Warn 'flutter not found or clean failed (continue)' }
    }
} else { Warn 'Skip flutter clean (requested)' }

# 3) Remove well-known build outputs
Step 'Removing project build outputs'
# Root build and dist
Remove-Path -Path 'build' -Recurse
if ($IncludeDist) { Remove-Path -Path 'dist' -Recurse }

# Windows integrated artifacts generated by prebuild
Remove-ByPattern -Patterns @(
    'windows/singbox.dll',
    'windows/singbox.h'
)

# Flutter ephemeral (sometimes left when clean fails)
Remove-Path -Path 'windows/flutter/ephemeral' -Recurse

# Daemon build outputs
Remove-ByPattern -Patterns @(
    'daemon/gsou_daemon.exe',     # built daemon
    'daemon/*.dll'                # e.g., copied wintun.dll beside daemon
)

# Service artifacts (if built locally)
Remove-ByPattern -Patterns @(
    'service/*.exe',
    'service/*.dll'
)

# 4) Optional caches
if ($IncludeCaches) {
    Step 'Removing local cache files'
    Remove-ByPattern -Patterns @(
        'cache.db',
        'daemon/cache.db'
    )
}

# 5) Optional Go caches
if ($GoCache) {
    Step 'Cleaning Go caches (go clean -cache -testcache -modcache)'
    if ($DryRun) { Write-Host 'Would run: go clean -cache -testcache -modcache' -ForegroundColor DarkGray }
    else {
        try { go clean -cache -testcache -modcache | Out-Null } catch { Warn 'go not found or clean failed (continue)' }
    }
}

Write-Host ''
Ok 'Cleanup completed.'
Write-Host ''
Write-Host 'Tips:' -ForegroundColor Yellow
Write-Host '  - Use -All to also clear caches and dist/ and Go caches' -ForegroundColor Gray
Write-Host '  - Use -DryRun to preview what will be deleted' -ForegroundColor Gray
